# Terraform Apply Workflow
# Runs when PR is merged to main

name: 'Terraform Apply'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'

# Ensure only one apply runs at a time
concurrency:
  group: terraform-apply
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  id-token: write

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-west-2'

jobs:
  # Detect which environments changed in the merge
  detect-changes:
    name: 'Detect Changed Environments'
    runs-on: ubuntu-latest
    outputs:
      dev: ${{ steps.filter.outputs.dev }}
      staging: ${{ steps.filter.outputs.staging }}
      prod: ${{ steps.filter.outputs.prod }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch current and previous commit

      - name: Check for changes
        id: filter
        run: |
          # Check which directories changed in last commit
          if git diff --name-only HEAD^ HEAD | grep -q "^terraform/dev/"; then
            echo "dev=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD^ HEAD | grep -q "^terraform/staging/"; then
            echo "staging=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD^ HEAD | grep -q "^terraform/prod/"; then
            echo "prod=true" >> $GITHUB_OUTPUT
          fi

  # Apply to dev environment (auto-approved)
  apply-dev:
    name: 'Apply - Development'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.dev == 'true'
    environment:
      name: development
      url: https://dev.example.com

    defaults:
      run:
        working-directory: terraform/dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        timeout-minutes: 30

      - name: Get Outputs
        id: outputs
        run: |
          terraform output -json > outputs.json
          cat outputs.json

      - name: Post Deployment Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `## ‚úÖ Deployment to Development Complete

            **Environment:** Development
            **Status:** Success
            **Time:** ${new Date().toISOString()}
            **Commit:** ${{ github.sha }}
            **Actor:** @${{ github.actor }}

            [View Kubernetes Cluster](https://dev.example.com)
            `;

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: summary
            });

  # Apply to staging environment (auto-approved, but can add manual approval)
  apply-staging:
    name: 'Apply - Staging'
    runs-on: ubuntu-latest
    needs: [detect-changes, apply-dev]
    if: needs.detect-changes.outputs.staging == 'true'
    environment:
      name: staging
      url: https://staging.example.com

    defaults:
      run:
        working-directory: terraform/staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        timeout-minutes: 30

      - name: Post Deployment Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `## ‚úÖ Deployment to Staging Complete

            **Environment:** Staging
            **Status:** Success
            **Time:** ${new Date().toISOString()}
            **Commit:** ${{ github.sha }}

            [View Kubernetes Cluster](https://staging.example.com)
            `;

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: summary
            });

  # Apply to production environment (MANUAL APPROVAL REQUIRED)
  apply-prod:
    name: 'Apply - Production'
    runs-on: ubuntu-latest
    needs: [detect-changes, apply-staging]
    if: needs.detect-changes.outputs.prod == 'true'
    environment:
      name: production
      url: https://example.com

    defaults:
      run:
        working-directory: terraform/prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      # Production gets a final plan before apply
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Wait for Approval
        run: |
          echo "::notice::Production deployment requires manual approval"
          echo "Review the plan above and approve in the GitHub UI"

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        timeout-minutes: 45

      - name: Run Smoke Tests
        run: |
          # Add smoke tests here
          echo "Running smoke tests..."
          # kubectl get pods -n production
          # curl https://example.com/health

      - name: Post Deployment Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `## üöÄ Deployment to Production Complete

            **Environment:** Production
            **Status:** Success
            **Time:** ${new Date().toISOString()}
            **Commit:** ${{ github.sha }}
            **Approver:** @${{ github.actor }}

            [View Production Site](https://example.com)

            **Post-Deployment Checklist:**
            - [ ] Verify application is healthy
            - [ ] Check metrics in Grafana
            - [ ] Monitor error rates
            - [ ] Test critical user flows
            `;

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: summary
            });

      # Slack notification (optional)
      # - name: Notify Slack
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     payload: |
      #       {
      #         "text": "üöÄ Production deployment complete: ${{ github.sha }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback job (manual trigger only)
  rollback:
    name: 'Rollback'
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify Failure
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `## ‚ùå Deployment Failed

            **Time:** ${new Date().toISOString()}
            **Commit:** ${{ github.sha }}

            **Rollback Options:**
            1. Revert the commit and push
            2. Run manual terraform destroy
            3. Restore from backup state

            [View Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: summary
            });
