# Terraform Destroy Workflow
# Manual workflow to destroy resources
# Use with extreme caution, especially for production!

name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      confirmation:
        description: 'Type the environment name to confirm'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-west-2'

jobs:
  # Validation job
  validate-input:
    name: 'Validate Destroy Request'
    runs-on: ubuntu-latest
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.environment }}" != "${{ github.event.inputs.confirmation }}" ]; then
            echo "::error::Confirmation does not match environment name"
            exit 1
          fi

      - name: Production Warning
        if: github.event.inputs.environment == 'prod'
        run: |
          echo "::warning::YOU ARE ABOUT TO DESTROY PRODUCTION!"
          echo "::warning::This will delete all resources in the production environment"
          echo "::warning::This action is irreversible"
          sleep 10  # Give time to cancel

  # Destroy job
  destroy:
    name: 'Destroy - ${{ github.event.inputs.environment }}'
    runs-on: ubuntu-latest
    needs: validate-input
    environment:
      name: ${{ github.event.inputs.environment }}

    defaults:
      run:
        working-directory: terraform/${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      # Backup state before destroying
      - name: Backup State
        run: |
          terraform state pull > state-backup-$(date +%Y%m%d-%H%M%S).json

      - name: Upload State Backup
        uses: actions/upload-artifact@v3
        with:
          name: state-backup-${{ github.event.inputs.environment }}
          path: terraform/${{ github.event.inputs.environment }}/state-backup-*.json
          retention-days: 90

      # Show destroy plan
      - name: Terraform Destroy Plan
        run: terraform plan -destroy -no-color

      # Final confirmation for production
      - name: Production Final Confirmation
        if: github.event.inputs.environment == 'prod'
        run: |
          echo "::warning::FINAL WARNING - Destroying production in 30 seconds"
          echo "::warning::Cancel now if this is a mistake!"
          sleep 30

      # Execute destroy
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        timeout-minutes: 60

      - name: Verify Destruction
        run: |
          # Verify no resources remain
          if terraform state list 2>/dev/null | grep -q '.'; then
            echo "::warning::Some resources may still exist in state"
            terraform state list
          else
            echo "All resources destroyed successfully"
          fi

      # Post destruction summary
      - name: Post Destruction Summary
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const success = '${{ job.status }}' === 'success';
            const summary = success ?
              `## üóëÔ∏è Destruction Complete - ${{ github.event.inputs.environment }}

              **Environment:** ${{ github.event.inputs.environment }}
              **Status:** Success
              **Time:** ${new Date().toISOString()}
              **Triggered by:** @${{ github.actor }}

              All resources have been destroyed.

              **State backup** available in workflow artifacts for 90 days.
              ` :
              `## ‚ùå Destruction Failed - ${{ github.event.inputs.environment }}

              **Environment:** ${{ github.event.inputs.environment }}
              **Status:** Failed
              **Time:** ${new Date().toISOString()}

              Check workflow logs for details.

              Resources may be partially destroyed - review manually:
              \`\`\`
              terraform state list
              \`\`\`
              `;

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: summary
            });

      # Notify on Slack (optional)
      # - name: Notify Slack
      #   if: github.event.inputs.environment == 'prod'
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     payload: |
      #       {
      #         "text": "üö® PRODUCTION DESTROYED by @${{ github.actor }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
